package bri;

import java.lang.reflect.Constructor;
import java.lang.reflect.Modifier;
import java.util.Collections;
import java.util.List;
import java.util.Vector;

public class ServiceRegistry {
	// cette classe est un registre de services
	// partagée en concurrence par les clients et les "ajouteurs" de services,
	// un Vector pour cette gestion est pratique

	static {
		servicesClasses = Collections.synchronizedList(new Vector<ClasseDemarree>());
	}
	private static List<ClasseDemarree> servicesClasses;

	
	public static void addService(Class<? extends Service> classe) throws ValidationException {
		validation(classe);
		servicesClasses.add(new ClasseDemarree(classe,true));
	}

	private static void validation(Class<? extends Service> classe) throws ValidationException {
		boolean extendsService = false;
		Constructor<? extends Service> c = null;
		try { 
			c = classe.getConstructor(java.net.Socket.class); 
		} catch (NoSuchMethodException e) {
			throw new ValidationException("Il faut un constructeur avec Socket");
		}
		int modifiers = c.getModifiers();
		if (!Modifier.isPublic(modifiers)) 
			throw new ValidationException("Le constructeur (Socket) doit être public");
		if (c.getExceptionTypes().length != 0)
			throw new ValidationException("Le constructeur (Socket) ne doit pas lever d'exception");
		}

	public static void supprimerService(int choix) {
		servicesClasses.remove(choix-1);
	}

	public static void majService(int choix, Class<? extends Service> c) throws ValidationException {
		validation(c);
		servicesClasses.set(choix - 1, new ClasseDemarree(c,true));
	}
		
	public static ClasseDemarree getServiceClass(int numService) {
		return servicesClasses.get(numService-1);
	}
	
		public static String toStringue() {
			String result = "Activités présentes :##";
			for(int i = 0; i < servicesClasses.size(); i++)
				result += (i+1 + " : " + servicesClasses.get(i).getMaclasse().getSimpleName()+" (démarré: " +servicesClasses.get(i).isDemarree()+ ")##");
			return result;
		}
}
