package xxx;

import javax.mail.internet.AddressException;
import javax.mail.Transport;
import javax.mail.BodyPart;
import javax.mail.Multipart;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMultipart;
import javax.mail.Message;
import javax.mail.Address;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.mail.Session;
import java.util.Properties;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Document;
import javax.xml.parsers.DocumentBuilder;
import java.io.InputStream;
import java.net.URLConnection;
import javax.mail.MessagingException;
import org.xml.sax.SAXException;
import javax.xml.parsers.ParserConfigurationException;
import java.io.IOException;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilderFactory;
import java.net.URL;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.Socket;
import bri.Service;

public class ServiceAnalyseXml implements Service
{
    private final Socket client;
    
    public ServiceAnalyseXml(final Socket socket) {
        this.client = socket;
    }
    
    public void run() {
        try {
             BufferedReader in = new BufferedReader(new InputStreamReader(this.client.getInputStream()));
             PrintWriter out = new PrintWriter(this.client.getOutputStream(), true);
           
             String url ="hh";//url
             URL urlObj = new URL(url);
             URLConnection con = urlObj.openConnection();
            InputStream file = con.getInputStream();
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
             DocumentBuilder db = dbf.newDocumentBuilder();
             Document document = db.parse(file);
            document.getDocumentElement().normalize();
             StringBuilder sb = new StringBuilder();
             sb.append("Voici l'analyse de votre fichier: \n");
            sb.append("Entreprise :" + document.getDocumentElement().getNodeName() + "\n");
             NodeList nList = document.getElementsByTagName("employee");
            sb.append("----------------------------");
            for (int temp = 0; temp < nList.getLength(); ++temp) {
                Node nNode = nList.item(temp);
                sb.append("\n Type :" + nNode.getNodeName() + "\n");
                if (nNode.getNodeType() == 1) {
                     Element eElement = (Element)nNode;
                   
		// fai ton analyse 
                    sb.append("Prenom : " + eElement.getElementsByTagName("firstname").item(0).getTextContent() + "\n");
                    
                }
            }
           
            this.envoi();
        }
        catch (IOException | ParserConfigurationException | SAXException | MessagingException e) {
            e.printStackTrace();
        }
    }
    
    public void envoi() throws AddressException, MessagingException {
         String smtpHost = "smtp.gmail";
         String from = "";
         String to = mail;
         String username = "";
         String password = "";
         Properties props = new Properties();
        props.put("mail.smtp.host", smtpHost);
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.port", 587);
        props.put("mail.smtp.starttls.enable", "true");
        Session session = Session.getDefaultInstance(props);
        session.setDebug(true);
         MimeMessage message = new MimeMessage(session);
        message.setFrom((Address)new InternetAddress(from));
        message.addRecipient(Message.RecipientType.TO, (Address)new InternetAddress(to));
         MimeMultipart multipart = new MimeMultipart("related");
         BodyPart messageBodyPart = (BodyPart)new MimeBodyPart();
         String htmlText = ""; // ton message 
        multipart.addBodyPart(messageBodyPart);
        message.setContent((Multipart)multipart);
         Transport tr = session.getTransport("smtp");
        tr.connect(smtpHost, username, password);
        message.saveChanges();
        tr.sendMessage((Message)message, message.getAllRecipients());
        tr.close();
    }
    
    @Override
    protected void finalize() throws Throwable {
        this.client.close();
    }
   
}