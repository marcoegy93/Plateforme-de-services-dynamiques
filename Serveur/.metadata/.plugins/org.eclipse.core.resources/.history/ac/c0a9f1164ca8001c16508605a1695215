package services;


import bri.Service;
import bri.ServiceRegistry;

import java.io.*;
import java.lang.reflect.Constructor;
import java.net.*;


public class ServiceAma implements Runnable {
	
	private Socket client;
	
	public ServiceAma(Socket socket) {
		client = socket;
	}

	public void run() {
		try {BufferedReader in = new BufferedReader (new InputStreamReader(client.getInputStream ( )));
			PrintWriter out = new PrintWriter (client.getOutputStream ( ), true);
			int choix;
			String msg = null;
			do {
				if(msg!=null) {
					out.println(msg+"##"+ServiceRegistry.toStringue()+"##Tapez le numéro du service :");
				}else {
					out.println(ServiceRegistry.toStringue()+"##Tapez le numéro du service :");
				}
				
			    choix = Integer.parseInt(in.readLine());
			    if(!ServiceRegistry.getServiceClass(choix).isDemarree()) {
			    	msg="classe non disponible( non démarrée par le programmeur)";
			    }else {
			    	//System.out.println(choix);
					// instancier le service numéro "choix" en lui passant la socket "client"
					Class<? extends Service> classe = ServiceRegistry.getServiceClass(choix).getMaclasse();
					//System.out.println(classe.getName());
					// invoquer run() pour cette instance ou la lancer dans un thread Ã  part 
				    Constructor<? extends Service> cons = classe.getConstructor(Socket.class);
				    new Thread(cons.newInstance(this.client)).start();
			    }
				//cons.newInstance(this.client).run();
			}while(!ServiceRegistry.getServiceClass(choix).isDemarree());

			}
		catch (Exception e) {
			//Fin du service
		}

		//try {client.close();} catch (IOException e2) {}
	}
	
	protected void finalize() throws Throwable {
		 client.close(); 
	}

	// lancement du service
	public void start() {
		(new Thread(this)).start();		
	}

}
